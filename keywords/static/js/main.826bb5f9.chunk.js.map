{"version":3,"sources":["components/ConversationSearch/index.js","components/ConversationListItem/index.js","components/Toolbar/index.js","components/ToolbarButton/index.js","components/Compose/index.js","components/ConversationList/index.js","components/Message/index.js","components/MessageList/index.js","components/Messenger/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["ConversationSearch","react_default","a","createElement","className","type","placeholder","Component","ConversationListItem","shave","_this$props$data","this","props","data","photo","name","text","src","alt","Toolbar","_this$props","title","leftItems","rightItems","ToolbarButton","icon","concat","Compose","handleKeyPress","event","key","window","location","reload","fetch","method","body","JSON","stringify","uuid","localStorage","getItem","response","target","value","console","log","onKeyPress","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","join","message","MessageList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getMessages","messages","setState","prevState","objectSpread","author","length","state","_this2","Math","random","toString","setItem","then","json","map","row","i","id","Date","getTime","messageCount","previous","current","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","components_Message_Message","components_Toolbar_Toolbar","components_ToolbarButton_ToolbarButton","renderMessages","components_Compose_Compose","Messenger","components_MessageList_MessageList","App","components_Messenger_Messenger","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6aAGqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,SACLD,UAAU,4BACVE,YAAY,4BAP0BC,sBCE3BC,qMAEjBC,YAAM,wBAAyB,qCAGxB,IAAAC,EACuBC,KAAKC,MAAMC,KAAjCC,EADDJ,EACCI,MAAOC,EADRL,EACQK,KAAMC,EADdN,EACcM,KAErB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBa,IAAKH,EAAOI,IAAI,iBACpDjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAuBW,GACrCd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAyBY,YAbET,cCF7BY,0LACV,IAAAC,EACkCT,KAAKC,MAAtCS,EADDD,EACCC,MAAOC,EADRF,EACQE,UAAWC,EADnBH,EACmBG,WAC1B,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAekB,GAC9BrB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAkBiB,GAChCpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAgBmB,WAPFhB,cCAhBiB,0LACV,IACCC,EAASd,KAAKC,MAAda,KACR,OACExB,EAAAC,EAAAC,cAAA,KAAGC,UAAS,kBAAAsB,OAAoBD,YAJKlB,+BCAtBoB,SCMyBpB,6NDL5CqB,eAAiB,SAACC,GACC,UAAdA,EAAMC,MACPC,OAAOC,SAASC,SAChBC,MAAM,iCAAkC,CACtCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAMC,aAAaC,QAAQ,QAC3BC,SAAUb,EAAMc,OAAOC,UAG3BC,QAAQC,IAAIjB,EAAMc,OAAOC,iFAK3B,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLD,UAAU,gBACVE,YAAY,wBACZyC,WAAYpC,KAAKiB,iBAIjBjB,KAAKC,MAAMW,mBA1BgBhB,8BEChByC,0LACV,IAAA5B,EAOHT,KAAKC,MALPC,EAFKO,EAELP,KACAoC,EAHK7B,EAGL6B,OACAC,EAJK9B,EAIL8B,eACAC,EALK/B,EAKL+B,aACAC,EANKhC,EAMLgC,cAGIC,EAAoBC,IAAOzC,EAAK0C,WAAWC,OAAO,QACxD,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAW,CACd,UADc,GAAAsB,OAEXuB,EAAS,OAAS,IAFP,GAAAvB,OAGXwB,EAAiB,QAAU,IAHhB,GAAAxB,OAIXyB,EAAe,MAAQ,KAC1BM,KAAK,MAEHL,GACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXiD,GAIRpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASiB,MAAOgC,GAC3BxC,EAAK6C,kBA3BkBnD,cCKhBoD,qBACnB,SAAAA,EAAY/C,GAAO,IAAAgD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlD,KAAAgD,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlD,KAAAkD,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtD,KAAMC,KAiBRsD,YAAc,SAACC,GACbP,EAAKQ,SAAS,SAAAC,GACZ,OAAOR,OAAAS,EAAA,EAAAT,CAAA,GACFQ,EADL,CAEEF,SAAUA,EACVI,OAAQJ,EAASA,EAASK,OAAO,GAAzB,YArBZZ,EAAKa,MAAQ,CACXN,SAAU,IAHKP,mFAOC,IAAAc,EAAA/D,KACd4B,EAAOC,aAAaC,QAAQ,QACrB,MAARF,IACDA,EAAOoC,KAAKC,SAASC,WACrBrC,aAAasC,QAAQ,OAAQvC,IAE/BL,MAAM,uCAAuCK,GAC1CwC,KAAK,SAAArC,GAAQ,OAAIA,EAASsC,SAC1BD,KAAK,SAAAlE,GAAI,OAAI6D,EAAKR,YAAYrD,EAAKoE,IAAI,SAACC,EAAKC,GAAN,MAAa,CAACC,GAAID,EAAGZ,OAAQW,EAAI,GAAIxB,QAASwB,EAAI,GAAI3B,WAAW,IAAI8B,MAAOC,yDAkBtH,IAJA,IAAIH,EAAI,EACJI,EAAe5E,KAAK8D,MAAMN,SAASK,OACnCL,EAAW,GAERgB,EAAII,GAAc,CACvB,IAAIC,EAAW7E,KAAK8D,MAAMN,SAASgB,EAAI,GACnCM,EAAU9E,KAAK8D,MAAMN,SAASgB,GAC9BO,EAAO/E,KAAK8D,MAAMN,SAASgB,EAAI,GACnCtC,QAAQC,IAAInC,KAAK8D,MAAMF,QACvB,IAAItB,EAASwC,EAAQlB,SAAW5D,KAAK8D,MAAMF,OACvCoB,EAAgBrC,IAAOmC,EAAQlC,WAG/BL,GAAiB,EACjBC,GAAe,EACfC,GAAgB,EAEpB,GAAIoC,EAAU,CACZ,IAAII,EAAiBtC,IAAOkC,EAASjC,WACjCsC,EAAmBvC,IAAOwC,SAASH,EAAcI,KAAKH,IACvCJ,EAASjB,SAAWkB,EAAQlB,QAEvBsB,EAAiBG,GAAG,SAAW,IACrD9C,GAAiB,GAGf2C,EAAiBG,GAAG,SAAW,IACjC5C,GAAgB,GAIpB,GAAIsC,EAAM,CACR,IAAIO,EAAa3C,IAAOoC,EAAKnC,WACzB2C,EAAe5C,IAAOwC,SAASG,EAAWF,KAAKJ,IAChCD,EAAKnB,SAAWkB,EAAQlB,QAEnB2B,EAAaF,GAAG,SAAW,IACjD7C,GAAe,GAInBgB,EAASgC,KACPlG,EAAAC,EAAAC,cAACiG,EAAD,CACEtE,IAAKqD,EACLlC,OAAQA,EACRC,eAAgBA,EAChBC,aAAcA,EACdC,cAAeA,EACfvC,KAAM4E,KAKVN,GAAK,EAGP,OAAOhB,mCAIP,OACElE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACkG,EAAD,CACEhF,MAAM,qBACNE,WAAY,CACVtB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,OAAOL,KAAK,uCAC/BxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,qBAChCxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,oBAIpCxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BO,KAAK4F,kBAE9CtG,EAAAC,EAAAC,cAACqG,EAAD,CAASjF,WAAY,CACnBtB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,mBAChCxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,kBAChCxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,gBAChCxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,iBAChCxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,+BAChCxB,EAAAC,EAAAC,cAACmG,EAAD,CAAexE,IAAI,QAAQL,KAAK,6BA7GDlB,cCJpBkG,0LAEjB,OACExG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAoBbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,2BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACuG,EAAD,eA5B6BnG,cCFlBoG,mLAEjB,OACE1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyG,EAAD,cAJyBrG,aCSbsG,QACW,cAA7B9E,OAAOC,SAAS8E,UAEe,UAA7B/E,OAAOC,SAAS8E,UAEhB/E,OAAOC,SAAS8E,SAASC,MACvB,2DCZNC,IAASC,OAAOhH,EAAAC,EAAAC,cAAC+G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.826bb5f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ConversationSearch.css';\n\nexport default class ConversationSearch extends Component {\n  render() {\n    return (\n      <div className=\"conversation-search\">\n        <input\n          type=\"search\"\n          className=\"conversation-search-input\"\n          placeholder=\"Search Messages\"\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport shave from 'shave';\n\nimport './ConversationListItem.css';\n\nexport default class ConversationListItem extends Component {\n  componentDidMount() {\n    shave('.conversation-snippet', 20);\n  }\n\n  render() {\n    const { photo, name, text } = this.props.data;\n\n    return (\n      <div className=\"conversation-list-item\">\n        <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\n        <div className=\"conversation-info\">\n          <h1 className=\"conversation-title\">{ name }</h1>\n          <p className=\"conversation-snippet\">{ text }</p>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './Toolbar.css';\n\nexport default class Toolbar extends Component {\n  render() {\n    const { title, leftItems, rightItems } = this.props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\">{ title }</h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './ToolbarButton.css';\n\nexport default class ToolbarButton extends Component {\n  render() {\n    const { icon } = this.props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n  }\n}","import React, { Component } from 'react';\nimport './Compose.css';\n\nexport default class Compose extends Component {\n  handleKeyPress = (event) => {\n    if(event.key === 'Enter'){\n      window.location.reload();\n      fetch(\"https://a1b64b58.ngrok.io/data\", {\n        method: 'POST',\n        body: JSON.stringify({\n          uuid: localStorage.getItem('uuid'),\n          response: event.target.value, \n        }),\n      });\n      console.log(event.target.value);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"compose\">\n        <input\n          type=\"text\"\n          className=\"compose-input\"\n          placeholder=\"Type a message, @name\"\n          onKeyPress={this.handleKeyPress}\n        />\n\n        {\n          this.props.rightItems\n        }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport axios from 'axios';\n\nimport './ConversationList.css';\n\nexport default class ConversationList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversations: []\n    };\n  }\n\n  componentDidMount() {\n    this.getConversations();\n  }\n\n  getConversations = () => {\n    axios.get('https://randomuser.me/api/?results=20').then(response => {\n      this.setState(prevState => {\n        let conversations = response.data.results.map(result => {\n          return {\n            photo: result.picture.large,\n            name: `${result.name.first} ${result.name.last}`,\n            text: 'Hello world! This is a long message that needs to be truncated.'\n          };\n        });\n\n        return { ...prevState, conversations };\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"conversation-list\">\n        <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        />\n        <ConversationSearch />\n        {\n          this.state.conversations.map(conversation =>\n            <ConversationListItem\n              key={conversation.name}\n              data={conversation}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport moment from 'moment';\nimport './Message.css';\n\nexport default class Message extends Component {\n  render() {\n    const {\n      data,\n      isMine,\n      startsSequence,\n      endsSequence,\n      showTimestamp\n    } = this.props;\n\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\n    return (\n      <div className={[\n        'message',\n        `${isMine ? 'mine' : ''}`,\n        `${startsSequence ? 'start' : ''}`,\n        `${endsSequence ? 'end' : ''}`\n      ].join(' ')}>\n        {\n          showTimestamp &&\n            <div className=\"timestamp\">\n              { friendlyTimestamp }\n            </div>\n        }\n\n        <div className=\"bubble-container\">\n          <div className=\"bubble\" title={friendlyTimestamp}>\n            { data.message }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\n\nimport './MessageList.css';\n\nexport default class MessageList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: []\n    };\n  }\n\n  componentDidMount() {\n    let uuid = localStorage.getItem('uuid') \n    if(uuid == null) {\n      uuid = Math.random().toString();\n      localStorage.setItem('uuid', uuid);\n    }\n    fetch(\"https://a1b64b58.ngrok.io/data?uuid=\"+uuid)\n      .then(response => response.json())\n      .then(data => this.getMessages(data.map((row, i) => ({id: i, author: row[0], message: row[1], timestamp: new Date().getTime()}))));\n  }\n\n  getMessages = (messages) => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        messages: messages,\n        author: messages[messages.length-1]['author'],\n      };\n    });\n  }\n\n  renderMessages() {\n    let i = 0;\n    let messageCount = this.state.messages.length;\n    let messages = [];\n\n    while (i < messageCount) {\n      let previous = this.state.messages[i - 1];\n      let current = this.state.messages[i];\n      let next = this.state.messages[i + 1];\n      console.log(this.state.author);\n      let isMine = current.author === this.state.author;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      messages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    return messages;\n  }\n\n  render() {\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n\n        <div className=\"message-list-container\">{this.renderMessages()}</div>\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\n\nexport default class Messenger extends Component {\n  render() {\n    return (\n      <div className=\"messenger\">\n        {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable sidebar\">\n          <h1>INSTRUCTIONS</h1>\n        </div>\n\n        <div className=\"scrollable content\">\n          <MessageList />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Messenger from '../Messenger';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Messenger />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}